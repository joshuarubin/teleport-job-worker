// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: jobworker/v1/jobworker.proto

package jobworkerv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	JobWorkerService_StartJob_FullMethodName        = "/jobworker.v1.JobWorkerService/StartJob"
	JobWorkerService_StopJob_FullMethodName         = "/jobworker.v1.JobWorkerService/StopJob"
	JobWorkerService_JobStatus_FullMethodName       = "/jobworker.v1.JobWorkerService/JobStatus"
	JobWorkerService_StreamJobOutput_FullMethodName = "/jobworker.v1.JobWorkerService/StreamJobOutput"
)

// JobWorkerServiceClient is the client API for JobWorkerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobWorkerServiceClient interface {
	StartJob(ctx context.Context, in *StartJobRequest, opts ...grpc.CallOption) (*StartJobResponse, error)
	StopJob(ctx context.Context, in *StopJobRequest, opts ...grpc.CallOption) (*StopJobResponse, error)
	JobStatus(ctx context.Context, in *JobStatusRequest, opts ...grpc.CallOption) (*JobStatusResponse, error)
	StreamJobOutput(ctx context.Context, in *StreamJobOutputRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamJobOutputResponse], error)
}

type jobWorkerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJobWorkerServiceClient(cc grpc.ClientConnInterface) JobWorkerServiceClient {
	return &jobWorkerServiceClient{cc}
}

func (c *jobWorkerServiceClient) StartJob(ctx context.Context, in *StartJobRequest, opts ...grpc.CallOption) (*StartJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartJobResponse)
	err := c.cc.Invoke(ctx, JobWorkerService_StartJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobWorkerServiceClient) StopJob(ctx context.Context, in *StopJobRequest, opts ...grpc.CallOption) (*StopJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopJobResponse)
	err := c.cc.Invoke(ctx, JobWorkerService_StopJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobWorkerServiceClient) JobStatus(ctx context.Context, in *JobStatusRequest, opts ...grpc.CallOption) (*JobStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JobStatusResponse)
	err := c.cc.Invoke(ctx, JobWorkerService_JobStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobWorkerServiceClient) StreamJobOutput(ctx context.Context, in *StreamJobOutputRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamJobOutputResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &JobWorkerService_ServiceDesc.Streams[0], JobWorkerService_StreamJobOutput_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamJobOutputRequest, StreamJobOutputResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type JobWorkerService_StreamJobOutputClient = grpc.ServerStreamingClient[StreamJobOutputResponse]

// JobWorkerServiceServer is the server API for JobWorkerService service.
// All implementations must embed UnimplementedJobWorkerServiceServer
// for forward compatibility.
type JobWorkerServiceServer interface {
	StartJob(context.Context, *StartJobRequest) (*StartJobResponse, error)
	StopJob(context.Context, *StopJobRequest) (*StopJobResponse, error)
	JobStatus(context.Context, *JobStatusRequest) (*JobStatusResponse, error)
	StreamJobOutput(*StreamJobOutputRequest, grpc.ServerStreamingServer[StreamJobOutputResponse]) error
	mustEmbedUnimplementedJobWorkerServiceServer()
}

// UnimplementedJobWorkerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedJobWorkerServiceServer struct{}

func (UnimplementedJobWorkerServiceServer) StartJob(context.Context, *StartJobRequest) (*StartJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartJob not implemented")
}
func (UnimplementedJobWorkerServiceServer) StopJob(context.Context, *StopJobRequest) (*StopJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopJob not implemented")
}
func (UnimplementedJobWorkerServiceServer) JobStatus(context.Context, *JobStatusRequest) (*JobStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobStatus not implemented")
}
func (UnimplementedJobWorkerServiceServer) StreamJobOutput(*StreamJobOutputRequest, grpc.ServerStreamingServer[StreamJobOutputResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamJobOutput not implemented")
}
func (UnimplementedJobWorkerServiceServer) mustEmbedUnimplementedJobWorkerServiceServer() {}
func (UnimplementedJobWorkerServiceServer) testEmbeddedByValue()                          {}

// UnsafeJobWorkerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobWorkerServiceServer will
// result in compilation errors.
type UnsafeJobWorkerServiceServer interface {
	mustEmbedUnimplementedJobWorkerServiceServer()
}

func RegisterJobWorkerServiceServer(s grpc.ServiceRegistrar, srv JobWorkerServiceServer) {
	// If the following call pancis, it indicates UnimplementedJobWorkerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&JobWorkerService_ServiceDesc, srv)
}

func _JobWorkerService_StartJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobWorkerServiceServer).StartJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobWorkerService_StartJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobWorkerServiceServer).StartJob(ctx, req.(*StartJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobWorkerService_StopJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobWorkerServiceServer).StopJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobWorkerService_StopJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobWorkerServiceServer).StopJob(ctx, req.(*StopJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobWorkerService_JobStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobWorkerServiceServer).JobStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobWorkerService_JobStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobWorkerServiceServer).JobStatus(ctx, req.(*JobStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobWorkerService_StreamJobOutput_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamJobOutputRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JobWorkerServiceServer).StreamJobOutput(m, &grpc.GenericServerStream[StreamJobOutputRequest, StreamJobOutputResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type JobWorkerService_StreamJobOutputServer = grpc.ServerStreamingServer[StreamJobOutputResponse]

// JobWorkerService_ServiceDesc is the grpc.ServiceDesc for JobWorkerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobWorkerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jobworker.v1.JobWorkerService",
	HandlerType: (*JobWorkerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartJob",
			Handler:    _JobWorkerService_StartJob_Handler,
		},
		{
			MethodName: "StopJob",
			Handler:    _JobWorkerService_StopJob_Handler,
		},
		{
			MethodName: "JobStatus",
			Handler:    _JobWorkerService_JobStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamJobOutput",
			Handler:       _JobWorkerService_StreamJobOutput_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "jobworker/v1/jobworker.proto",
}
